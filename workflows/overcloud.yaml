heat_template_version: 2015-10-15

description: >
    ...

parameters:

  keypair_name:
    type: string
    description: Name of a key pair to enable SSH access to the instance
    default: cwkim

  keypair_private_key_url:
    type: string
    description: Given key pair's private key
    default: http://210.125.84.51/templates/cwkim.pem

  image:
    type: string
    description: >
      Name or ID of the image to use for the Ubuntu isntances.
    default: xenial

  overcloud_tower_flavor:
    type: string
    description: Flavor for OverCloud tower
    default: m1.medium.lxd
    constraints:
      - allowed_values: [m1.tiny, m1.small, m1.medium, m1.medium.lxd, m1.large, m1.xlarge]
        description: instance_type must be a valid instance type

  overcloud_datalake_flavor:
    type: string
    description: Flavor for OverCloud tower
    default: m1.medium.lxd
    constraints:
      - allowed_values: [m1.tiny, m1.small, m1.medium, m1.medium.lxd, m1.large, m1.xlarge]
        description: instance_type must be a valid instance type

  overcloud_datalake_flavor:
    type: string
    description: Flavor for OverCloud data lake
    default: m1.medium.lxd
    constraints:
      - allowed_values: [m1.tiny, m1.small, m1.medium, m1.medium.lxd, m1.large, m1.xlarge]
        description: instance_type must be a valid instance type

  overcloud_logical_cluster_flavor:
    type: string
    description: Flavor for OverCloud logical clusters
    default: m1.medium.lxd
    constraints:
      - allowed_values: [m1.tiny, m1.small, m1.medium, m1.medium.lxd, m1.large, m1.xlarge]
        description: instance_type must be a valid instance type

  logical_cluster_count:
      type: number
      description: Count of OverCloud logical clusters
      default: 1

  public_net:
      type: string
      description: ID of public network for which floating IP addresses will be allocated
      default: 4f692f6a-d7db-4f29-9663-c7f5d93dad4d

  private_net:
      type: string
      description: ID of private network into which servers get deployed
      default: 25fbadfe-c7e8-4961-bbbb-90c1fd895c39

  private_subnet:
      type: string
      description: ID of private sub network into which servers get deployed
      default: d8a7d5a2-dfcc-40bc-92a9-2ee57a08daff

resources:
  TowerServer:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: overcloud_tower_flavor }
      key_name: { get_param: keypair_name }
      networks:
          - port: { get_resource: TowerServerPort }
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v

            tee -a /etc/default/locale <<EOF > /dev/null
            LANGUAGE="en_US.UTF8"
            LC_ALL="en_US.UTF8"
            LC_CTYPE="en_US.UTF8"
            EOF

            export LANGUAGE="en_US.UTF8"
            export LC_ALL="en_US.UTF8"
            export LC_CTYPE="en_US.UTF8"

            apt-get update
            apt-get -y upgrade

            ## Retrieving and installing SSH key

            ssh_dir=".ssh"
            id_rsa=id_rsa
            id_rsa_pub=${id_rsa}.pub

            root_dir="/root"
            root_ssh_dir=${root_dir}/${ssh_dir}

            mkdir -p ${root_ssh_dir}
            wget -O ${root_ssh_dir}/${id_rsa} key_url
            chmod 600 ${root_ssh_dir}/${id_rsa}
            ssh-keygen -y -f ${root_ssh_dir}/${id_rsa} > ${root_ssh_dir}/${id_rsa_pub}
            chmod 600 ${root_ssh_dir}/${id_rsa_pub}

            user_name="ubuntu"
            user_dir=/home/$user_name
            user_ssh_dir=${user_dir}/${ssh_dir}

            mkdir -p ${user_ssh_dir}
            cp ${root_ssh_dir}/${id_rsa} ${user_ssh_dir}/${id_rsa}
            chmod 600 ${user_ssh_dir}/${id_rsa}
            chown ubuntu:ubuntu ${user_ssh_dir}/${id_rsa}
            cp ${root_ssh_dir}/${id_rsa_pub} ${user_ssh_dir}/${id_rsa_pub}
            chmod 600 ${user_ssh_dir}/${id_rsa_pub}
            chown ubuntu:ubuntu ${user_ssh_dir}/${id_rsa_pub}

            ## Installing Docker & Docker Compose

            apt-get -y install docker.io
            apt-get -y remove apparmor apparmor-utils

            user_name="ubuntu"
            usermod -aG docker $user_name

            curl -L "https://github.com/docker/compose/releases/download/1.8.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

            ## Writing docker-compose.yml

            docker_compose_dir=${user_dir}/docker-compose
            mkdir -p ${docker_compose_dir}
            tee -a ${docker_compose_dir}/docker-compose.yml <<EOF > /dev/null
            version: '2'

            services:
               db:
                 image: mysql:5.7
                 volumes:
                   - db_data:/var/lib/mysql
                 restart: always
                 environment:
                   MYSQL_ROOT_PASSWORD: wordpress
                   MYSQL_DATABASE: wordpress
                   MYSQL_USER: wordpress
                   MYSQL_PASSWORD: wordpress

               wordpress:
                 depends_on:
                   - db
                 image: wordpress:latest
                 ports:
                   - "8000:80"
                 restart: always
                 environment:
                   WORDPRESS_DB_HOST: db:3306
                   WORDPRESS_DB_PASSWORD: wordpress
            volumes:
                db_data:

            EOF
            chown -R ubuntu:ubuntu ${docker_compose_dir}

            init-service="init-service"
            tee -a ${user_dir}/${init-service}.sh <<EOF > /dev/null
            #!/bin/bash

            for server_ip in cluster_server_ips
            do
              ssh -o StrictHostKeyChecking=no $user_name@\$server_ip "mkdir ~/docker-compose"
              scp -o StrictHostKeyChecking=no ${docker_compose_dir}/docker-compose.yml $user_name@\$server_ip:~/docker-compose
              ssh -o StrictHostKeyChecking=no $user_name@\$server_ip "cd ~/docker-compose; docker-compose up -d"
            done
            EOF
            chmod u+x ${user_dir}/${init-service}.sh
            chown ubuntu:ubuntu ${user_dir}/${init-service}.sh

            wc_notify --data-binary '{"status": "SUCCESS"}' #'

          params:
            wc_notify: { get_attr: ['TowerServerWaitHandle', 'curl_cli'] }
            key_url: { get_param: keypair_private_key_url }
            cluster_server_ips: { list_join: [' ', get_attr: [LogicalClusterGroup, logical_cluster_server_ip]] }

  TowerServerWaitCondition: 
    type: "OS::Heat::WaitCondition"
    properties: 
      handle: 
        get_resource: TowerServerWaitHandle
      timeout: 1000

  TowerServerWaitHandle: 
    type: "OS::Heat::WaitConditionHandle"      

  TowerServerPort:
      type: OS::Neutron::Port
      properties:
          network_id : { get_param: private_net }
          fixed_ips:
              - subnet_id: { get_param: private_subnet }
          security_groups: [{get_resource: TowerServerSecurityGroup }]

  TowerServerSecurityGroup:
      type: OS::Neutron::SecurityGroup
      properties:
          rules:
            - remote_ip_prefix: 0.0.0.0/0
              protocol: icmp
            - remote_ip_prefix: 0.0.0.0/0
              protocol: tcp
              port_range_min: 1
              port_range_max: 65535
            - remote_ip_prefix: 0.0.0.0/0
              protocol: udp
              port_range_min: 1
              port_range_max: 65535

  TowerServerFloatingIP:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: TowerServerPort }

  DataLakeServer:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: overcloud_datalake_flavor }
      key_name: { get_param: keypair_name }
      networks:
          - port: { get_resource: DataLakeServerPort }
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v

            tee -a /etc/default/locale <<EOF
            LANGUAGE="en_US.UTF8"
            LC_ALL="en_US.UTF8"
            LC_CTYPE="en_US.UTF8"
            EOF

            export LANGUAGE="en_US.UTF8"
            export LC_ALL="en_US.UTF8"
            export LC_CTYPE="en_US.UTF8"

            # apt-get update
            # apt-get -y upgrade

            wc_notify --data-binary '{"status": "SUCCESS"}' #'

          params:
            wc_notify: { get_attr: ['DataLakeServerWaitHandle', 'curl_cli'] }

  DataLakeServerWaitCondition: 
    type: "OS::Heat::WaitCondition"
    properties: 
      handle: 
        get_resource: DataLakeServerWaitHandle
      timeout: 1000

  DataLakeServerWaitHandle: 
    type: "OS::Heat::WaitConditionHandle"      

  DataLakeServerPort:
      type: OS::Neutron::Port
      properties:
          network_id : { get_param: private_net }
          fixed_ips:
              - subnet_id: { get_param: private_subnet }
          security_groups: [{get_resource: DataLakeServerSecurityGroup }]

  DataLakeServerSecurityGroup:
      type: OS::Neutron::SecurityGroup
      properties:
          rules:
            - remote_ip_prefix: 0.0.0.0/0
              protocol: icmp
            - remote_ip_prefix: 0.0.0.0/0
              protocol: tcp
              port_range_min: 1
              port_range_max: 65535
            - remote_ip_prefix: 0.0.0.0/0
              protocol: udp
              port_range_min: 1
              port_range_max: 65535

  LogicalClusterGroup:
      type: OS::Heat::ResourceGroup
      properties:
        count: { get_param: logical_cluster_count }
        resource_def:
          type: http://210.125.84.51/templates/overcloud_logical_cluster.yaml
          properties:
            keypair_name: { get_param: keypair_name }
            flavor: { get_param: overcloud_logical_cluster_flavor }
            image: { get_param: image}
            public_net: { get_param: public_net }
            private_net: { get_param: private_net }
            private_subnet: { get_param: private_subnet }
            security_group: { get_resource: LogicalClusterSecurityGroup }
            user_data:
              str_replace:
                template: |
                  #!/bin/bash -v

                  tee -a /etc/default/locale <<EOF
                  LANGUAGE="en_US.UTF8"
                  LC_ALL="en_US.UTF8"
                  LC_CTYPE="en_US.UTF8"
                  EOF

                  export LANGUAGE="en_US.UTF8"
                  export LC_ALL="en_US.UTF8"
                  export LC_CTYPE="en_US.UTF8"

                  apt-get update
                  apt-get -y upgrade

                  ## Installing Docker & Docker Compose

                  apt-get -y install docker.io
                  apt-get -y remove apparmor apparmor-utils

                  user_name="ubuntu"
                  usermod -aG docker $user_name

                  curl -L "https://github.com/docker/compose/releases/download/1.8.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                  chmod +x /usr/local/bin/docker-compose

                  wc_notify --data-binary '{"status": "SUCCESS"}' #'

                params:
                  wc_notify: { get_attr: ['LogicalClusterGroupWaitHandle', 'curl_cli'] }

  LogicalClusterGroupWaitCondition: 
    type: "OS::Heat::WaitCondition"
    properties: 
      handle: 
        get_resource: LogicalClusterGroupWaitHandle
      timeout: 1000
      count: { get_param: logical_cluster_count }

  LogicalClusterGroupWaitHandle: 
    type: "OS::Heat::WaitConditionHandle"      

  LogicalClusterSecurityGroup:
      type: OS::Neutron::SecurityGroup
      properties:
          rules:
            - remote_ip_prefix: 0.0.0.0/0
              protocol: icmp
            - remote_ip_prefix: 0.0.0.0/0
              protocol: tcp
              port_range_min: 1
              port_range_max: 65535
            - remote_ip_prefix: 0.0.0.0/0
              protocol: udp
              port_range_min: 1
              port_range_max: 65535

outputs:
  TowerURL:
    description: Floating IP of Tower
    value:
      str_replace:
        template: host
        params:
          host: { get_attr: [TowerServerFloatingIP, floating_ip_address] }
  LogicalClusterFloatingIP:
    description: Floating IPs of Logical Clusters
    value:
      str_replace:
        template: host
        params:
          host: { list_join: [', ', get_attr: [LogicalClusterGroup, logical_cluster_server_floating_ip]] }

